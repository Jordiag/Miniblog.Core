<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Welcome to your new blog</title>
  <slug>welcome</slug>
  <pubDate>2017-10-13T17:59:01.000Z</pubDate>
  <lastModified>2019-12-08T16:58:41.666Z</lastModified>
  <excerpt>Congratulations on your new blog</excerpt>
  <content>&lt;p&gt;Congratulations on installing your new blog!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/madskristensen/Miniblog.Core"&gt;Miniblog.Core&lt;/a&gt; is optimized to give your visitors a fantastic reading experience on all types of devices. It is built to be fast and responsive so your visitors never have to wait for the content to load.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre class="language-csharp"&gt;&lt;code&gt;using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Rewrite;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Miniblog.Core.Services;
using WebEssentials.AspNetCore.OutputCaching;
using WebMarkupMin.AspNetCore2;
using WebMarkupMin.Core;
using WilderMinds.MetaWeblog;

using IWmmLogger = WebMarkupMin.Core.Loggers.ILogger;
using MetaWeblogService = Miniblog.Core.Services.MetaWeblogService;
using WmmNullLogger = WebMarkupMin.Core.Loggers.NullLogger;

namespace Miniblog.Core
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public static void Main(string[] args)
        {
            CreateWebHostBuilder(args).Build().Run();
        }

        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&amp;gt;
            WebHost.CreateDefaultBuilder(args)
                .UseStartup&amp;lt;Startup&amp;gt;()
                .UseKestrel(a =&amp;gt; a.AddServerHeader = false);

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc()
                .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);

            services.AddSingleton&amp;lt;IUserServices, BlogUserServices&amp;gt;();
            services.AddSingleton&amp;lt;IBlogService, FileBlogService&amp;gt;();
            services.Configure&amp;lt;BlogSettings&amp;gt;(Configuration.GetSection("blog"));
            services.TryAddSingleton&amp;lt;IHttpContextAccessor, HttpContextAccessor&amp;gt;();
            services.AddMetaWeblog&amp;lt;MetaWeblogService&amp;gt;();

            // Progressive Web Apps https://github.com/madskristensen/WebEssentials.AspNetCore.ServiceWorker
            services.AddProgressiveWebApp(new WebEssentials.AspNetCore.Pwa.PwaOptions
            {
                OfflineRoute = "/shared/offline/"
            });

            // Output caching (https://github.com/madskristensen/WebEssentials.AspNetCore.OutputCaching)
            services.AddOutputCaching(options =&amp;gt;
            {
                options.Profiles["default"] = new OutputCacheProfile
                {
                    Duration = 3600
                };
            });

            // Cookie authentication.
            services
                .AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
                .AddCookie(options =&amp;gt;
                {
                    options.LoginPath = "/login/";
                    options.LogoutPath = "/logout/";
                });

            // HTML minification (https://github.com/Taritsyn/WebMarkupMin)
            services
                .AddWebMarkupMin(options =&amp;gt;
                {
                    options.AllowMinificationInDevelopmentEnvironment = true;
                    options.DisablePoweredByHttpHeaders = true;
                })
                .AddHtmlMinification(options =&amp;gt;
                {
                    options.MinificationSettings.RemoveOptionalEndTags = false;
                    options.MinificationSettings.WhitespaceMinificationMode = WhitespaceMinificationMode.Safe;
                });
            services.AddSingleton&amp;lt;IWmmLogger, WmmNullLogger&amp;gt;(); // Used by HTML minifier

            // Bundling, minification and Sass transpilation (https://github.com/ligershark/WebOptimizer)
            services.AddWebOptimizer(pipeline =&amp;gt;
            {
                pipeline.MinifyJsFiles();
                pipeline.CompileScssFiles()
                        .InlineImages(1);
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseBrowserLink();
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Shared/Error");
                app.UseHsts();
            }

            app.Use((context, next) =&amp;gt;
            {
                context.Response.Headers["X-Content-Type-Options"] = "nosniff";
                return next();
            });

            app.UseStatusCodePagesWithReExecute("/Shared/Error");
            app.UseWebOptimizer();

            app.UseStaticFilesWithCache();

            if (Configuration.GetValue&amp;lt;bool&amp;gt;("forcessl"))
            {
                app.UseHttpsRedirection();
            }

            app.UseMetaWeblog("/metaweblog");
            app.UseAuthentication();

            app.UseOutputCaching();
            app.UseWebMarkupMin();

            app.UseMvc(routes =&amp;gt;
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Blog}/{action=Index}/{id?}");
            });
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Fonts and layout&lt;/h2&gt;
&lt;p&gt;Instead of using custom fonts that visitors need to download, Miniblog.Core uses fonts native to each device and operating system. This ensures that the blog loads very fast and the fonts feel natural and beautiful on all devices.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Common text layouts are being styled to look great. This is an example of what a blockquote looks like.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is a list of just some of the features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Social media integration&lt;/li&gt;
&lt;li&gt;User comments&lt;/li&gt;
&lt;li&gt;Passing &lt;a href="http://webdevchecklist.com/"&gt;Web Developer Checklist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Search engine optimized&lt;/li&gt;
&lt;li&gt;Supported in all major browsers&lt;/li&gt;
&lt;li&gt;Phone and tablet support&lt;/li&gt;
&lt;li&gt;Fast and responsive&lt;/li&gt;
&lt;li&gt;RSS/ATOM feeds&lt;/li&gt;
&lt;li&gt;Windows/Open Live Writer/Markdown Monster support&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Special formatting&lt;/h2&gt;
&lt;p&gt;Pre-formatted text such as what is commonly used to display code syntax is styled beautifully.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function code() {
   var msg = "This is what a code snippet looks like";
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And tables are formatted nicely with headings and alternative background color for rows.&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;And tables&lt;/th&gt;
&lt;th&gt;look&lt;/th&gt;
&lt;th&gt;rally&lt;/th&gt;
&lt;th&gt;nice&lt;/th&gt;
&lt;th&gt;too&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Numbers&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alphabet&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Symbols&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content>
  <ispublished>true</ispublished>
  <categories>
    <category>welcome</category>
    <category>miniblog</category>
  </categories>
  <comments>
    <comment isAdmin="false" id="cd58dea4-a4d5-498a-b164-6a5b7c3f2f62">
      <author>John Doe</author>
      <email>john@gmail.com</email>
      <date>2017-10-13T19:15:23.000Z</date>
      <content>This is a comment made by a visitor</content>
    </comment>
    <comment isAdmin="true" id="13d7cd7d-6336-4c42-8c91-27f27d6bf648">
      <author>Mads Kristensen</author>
      <email>post@madskristensen.net</email>
      <date>2017-10-13T19:15:48.000Z</date>
      <content>This is a comment made by the owner of the blog while logged in.

It looks slightly different to make it clear that this is a response from the owner.</content>
    </comment>
  </comments>
</post>